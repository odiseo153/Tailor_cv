---
description: 
globs: *.tsx,*.ts
alwaysApply: false
---
# TypeScript & React Development Guidelines

You are an expert in TypeScript, React, and modern web development patterns.

## Code Style and Structure

- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes except when necessary (e.g., error boundaries)
- Prefer composition over inheritance and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`, `canSubmit`)
- Structure files: exported component, subcomponents, custom hooks, helpers, types/interfaces
- Follow the principle of single responsibility for components and functions

## Naming Conventions

- Use kebab-case for directories (e.g., `components/user-profile`, `hooks/use-auth`)
- Use PascalCase for component names and interfaces
- Use camelCase for variables, functions, and props
- Favor named exports for components and utilities
- Use descriptive names that clearly indicate purpose and type

## TypeScript Usage

- Use TypeScript for all code with strict mode enabled
- Prefer interfaces over types for object shapes; use types for unions, primitives, and computed types
- Avoid enums; use const assertions and union types instead
- Define prop interfaces for all components with meaningful names (e.g., `UserCardProps`, `ModalState`)
- Use generic types for reusable components and hooks
- Leverage utility types (`Partial`, `Pick`, `Omit`, `Record`) for type transformations
- Use branded types for primitive values that need semantic meaning

```typescript
// Good
interface User {
  id: string;
  name: string;
  email: string;
}

type Status = 'loading' | 'success' | 'error';

// Better than enum
const USER_ROLES = {
  ADMIN: 'admin',
  USER: 'user',
  GUEST: 'guest'
} as const;

type UserRole = typeof USER_ROLES[keyof typeof USER_ROLES];
```

## Syntax and Formatting

- Use function declarations for named functions, arrow functions for inline callbacks
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements
- Use declarative JSX with proper fragment usage
- Use Prettier and ESLint for consistent code formatting and quality
- Prefer early returns to reduce nesting depth

```typescript
// Good
function processUser(user: User | null) {
  if (!user) return null;
  if (!user.isActive) return { ...user, status: 'inactive' };
  
  return enhanceUser(user);
}
```

## Component Architecture

- Use functional components exclusively with React hooks
- Implement proper component composition with clear prop interfaces
- Use compound components pattern for complex UI elements
- Separate presentation components from container components
- Create custom hooks for reusable stateful logic
- Use React.memo for expensive components with stable props

```typescript
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  isLoading?: boolean;
}

export function Button({ 
  variant = 'primary', 
  size = 'md', 
  isLoading = false,
  children,
  className,
  ...props 
}: ButtonProps) {
  return (
    <button
      className={clsx(getButtonClasses(variant, size), className)}
      disabled={isLoading || props.disabled}
      {...props}
    >
      {isLoading ? <Spinner /> : children}
    </button>
  );
}
```

## State Management

- Use useState for local component state
- Use useReducer for complex state logic with multiple sub-values
- Implement React Context with custom hooks for global state
- Use state machines (XState) for complex application flows
- Consider Zustand or Jotai for lightweight global state
- Use React Query/TanStack Query for server state management
- Avoid prop drilling; lift state appropriately or use context

```typescript
// Custom hook pattern
interface UseToggleReturn {
  isOpen: boolean;
  open: () => void;
  close: () => void;
  toggle: () => void;
}

export function useToggle(initialState = false): UseToggleReturn {
  const [isOpen, setIsOpen] = useState(initialState);
  
  const open = useCallback(() => setIsOpen(true), []);
  const close = useCallback(() => setIsOpen(false), []);
  const toggle = useCallback(() => setIsOpen(prev => !prev), []);
  
  return { isOpen, open, close, toggle };
}
```

## Performance Optimization

- Use React.memo for components with expensive renders
- Implement useMemo for expensive calculations
- Use useCallback for stable function references in dependencies
- Avoid creating objects/arrays in render; extract to constants or useMemo
- Implement code splitting with React.lazy and Suspense
- Use React DevTools Profiler to identify performance bottlenecks
- Implement virtualization for large lists (react-window, react-virtualized)

```typescript
const ExpensiveComponent = React.memo(function ExpensiveComponent({ 
  data, 
  onSelect 
}: ExpensiveComponentProps) {
  const processedData = useMemo(() => 
    data.map(item => expensiveTransform(item)), 
    [data]
  );
  
  const handleSelect = useCallback((id: string) => {
    onSelect(id);
  }, [onSelect]);
  
  return (
    <div>
      {processedData.map(item => (
        <Item key={item.id} data={item} onSelect={handleSelect} />
      ))}
    </div>
  );
});
```

## Error Handling and Validation

- Use Zod or Yup for runtime validation and schema definition
- Implement error boundaries for graceful error handling
- Use Result/Either patterns for explicit error handling in utilities
- Handle async operations with proper error states
- Implement retry logic for transient failures
- Use type-safe error handling with discriminated unions

```typescript
import { z } from 'zod';

const UserSchema = z.object({
  id: z.string(),
  name: z.string().min(1),
  email: z.string().email(),
  age: z.number().min(0).max(120)
});

type User = z.infer<typeof UserSchema>;

// Result pattern for error handling
type Result<T, E = Error> = 
  | { success: true; data: T }
  | { success: false; error: E };

async function fetchUser(id: string): Promise<Result<User>> {
  try {
    const response = await api.get(`/users/${id}`);
    const user = UserSchema.parse(response.data);
    return { success: true, data: user };
  } catch (error) {
    return { 
      success: false, 
      error: error instanceof Error ? error : new Error('Unknown error')
    };
  }
}
```

## Testing

- Write unit tests using Jest and React Testing Library
- Focus on testing behavior, not implementation details
- Use MSW (Mock Service Worker) for API mocking
- Implement integration tests for critical user flows
- Use data-testid sparingly; prefer semantic queries
- Test custom hooks in isolation

```typescript
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';

describe('LoginForm', () => {
  it('should handle successful login', async () => {
    const mockOnLogin = jest.fn();
    const user = userEvent.setup();
    
    render(<LoginForm onLogin={mockOnLogin} />);
    
    await user.type(screen.getByLabelText(/email/i), 'test@example.com');
    await user.type(screen.getByLabelText(/password/i), 'password123');
    await user.click(screen.getByRole('button', { name: /log in/i }));
    
    await waitFor(() => {
      expect(mockOnLogin).toHaveBeenCalledWith({
        email: 'test@example.com',
        password: 'password123'
      });
    });
  });
});
```

## Security and Best Practices

- Sanitize user inputs and validate on both client and server
- Use HTTPS for all API communications
- Implement proper authentication and authorization patterns
- Use secure storage for sensitive data
- Avoid exposing sensitive information in client-side code
- Implement Content Security Policy (CSP) headers
- Use environment variables for configuration

## Accessibility (a11y)

- Use semantic HTML elements appropriately
- Implement proper ARIA labels and roles
- Ensure keyboard navigation support
- Maintain proper color contrast ratios
- Test with screen readers
- Use focus management for dynamic content
- Implement skip links for main content

## Modern React Patterns

- Use Suspense for data fetching and code splitting
- Implement Concurrent Features (useTransition, useDeferredValue)
- Use Server Components when appropriate (Next.js 13+)
- Leverage React 18+ features for better UX
- Use modern bundlers (Vite, Turbopack) for faster development

## Key Conventions

1. Prioritize type safety and compile-time error detection
2. Write self-documenting code with clear interfaces
3. Favor composition and hooks over inheritance and classes
4. Implement progressive enhancement and graceful degradation
5. Use modern JavaScript/TypeScript features appropriately
6. Maintain consistent code style across the project
7. Document complex logic and business rules
8. Use automated testing to ensure code quality
9. Implement proper error handling and user feedback
10. Follow React best practices and stay updated with ecosystem changes

## Project Structure Example

```
src/
├── components/           # Reusable UI components
│   ├── ui/              # Basic UI primitives
│   └── composite/       # Complex composed components
├── hooks/               # Custom React hooks
├── services/            # API and external service logic
├── types/               # TypeScript type definitions
├── utils/               # Pure utility functions
├── stores/              # Global state management
├── pages/               # Page-level components
└── __tests__/           # Test files
```

This approach ensures maintainable, scalable, and type-safe React applications with excellent developer experience and runtime reliability.