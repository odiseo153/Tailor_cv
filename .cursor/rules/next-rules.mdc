---
description: 
globs: 
alwaysApply: false
---
# Next.js with TypeScript Development Guidelines

You are an expert in TypeScript, Next.js, React, and modern full-stack web development.

## Development Philosophy

- Write clean, maintainable, and scalable code following SOLID principles
- Prefer functional and declarative programming patterns over imperative
- Emphasize type safety and static analysis throughout the application
- Practice component-driven development with proper separation of concerns
- Leverage Next.js features for optimal performance and SEO

## Code Implementation Guidelines

### Planning Phase
- Begin with step-by-step planning and architecture design
- Write detailed pseudocode before implementation
- Document component architecture, data flow, and API routes
- Consider edge cases, error scenarios, and performance implications
- Plan for SEO, accessibility, and internationalization from the start

### Code Style
- Use tabs for indentation (or configure Prettier consistently)
- Use single quotes for strings (except to avoid escaping)
- Omit semicolons (unless required for disambiguation)
- Eliminate unused variables and imports
- Add space after keywords and before function declaration parentheses
- Always use strict equality (===) instead of loose equality (==)
- Space infix operators and add space after commas
- Keep else statements on the same line as closing curly braces
- Use curly braces for multi-line if statements
- Always handle error parameters in callbacks
- Limit line length to 80-100 characters
- Use trailing commas in multiline object/array literals

## Naming Conventions

### General Rules
- **PascalCase for:**
  - Components (`UserProfile`, `AuthModal`)
  - Type definitions and interfaces (`User`, `ApiResponse`)
  - Pages and layouts (`HomePage`, `DashboardLayout`)
- **kebab-case for:**
  - Directory names (`components/auth-wizard`, `pages/user-profile`)
  - File names (`user-profile.tsx`, `api-client.ts`)
- **camelCase for:**
  - Variables, functions, methods (`userName`, `fetchUserData`)
  - Hooks (`useAuth`, `useLocalStorage`)
  - Properties and props (`isLoading`, `onSubmit`)
- **UPPERCASE for:**
  - Environment variables (`DATABASE_URL`, `NEXT_PUBLIC_API_URL`)
  - Constants and global configurations (`MAX_RETRY_ATTEMPTS`)

### Specific Naming Patterns
- Prefix event handlers with 'handle': `handleClick`, `handleFormSubmit`
- Prefix boolean variables with verbs: `isLoading`, `hasError`, `canSubmit`
- Prefix custom hooks with 'use': `useAuth`, `useApiQuery`
- Use complete words over abbreviations except for common cases:
  - `err` (error), `req` (request), `res` (response)
  - `props` (properties), `ref` (reference), `params` (parameters)

## Next.js Architecture & Best Practices

### App Router (Next.js 13+)
- Utilize App Router for file-based routing with enhanced features
- Implement proper metadata management using the Metadata API
- Use proper caching strategies with revalidation
- Implement error boundaries and not-found pages
- Leverage parallel routes and intercepting routes for complex layouts

```typescript
// app/layout.tsx
import { Metadata } from 'next'

export const metadata: Metadata = {
  title: {
    template: '%s | My App',
    default: 'My App'
  },
  description: 'Modern web application built with Next.js'
}

export default function RootLayout({
  children
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

### Server and Client Components
- **Default to Server Components** for better performance and SEO
- Use URL query parameters and route parameters for server state management
- Use `'use client'` directive only when necessary:
  - Event listeners and browser APIs
  - State management with hooks
  - Client-side-only libraries
  - Interactive components requiring user input

```typescript
// Server Component (default)
async function UserProfile({ userId }: { userId: string }) {
  const user = await fetchUser(userId) // Runs on server
  
  return (
    <div>
      <h1>{user.name}</h1>
      <ClientInteractiveButton userId={userId} />
    </div>
  )
}

// Client Component
'use client'
function ClientInteractiveButton({ userId }: { userId: string }) {
  const [isLiked, setIsLiked] = useState(false)
  
  return (
    <button onClick={() => setIsLiked(!isLiked)}>
      {isLiked ? 'Unlike' : 'Like'}
    </button>
  )
}
```

### Built-in Components
- Use Next.js optimized components:
  - `Image` component for automatic optimization
  - `Link` component for client-side navigation
  - `Script` component for external scripts
  - `Font` optimization for custom fonts

```typescript
import Image from 'next/image'
import Link from 'next/link'

function ProductCard({ product }: { product: Product }) {
  return (
    <Link href={`/products/${product.id}`}>
      <div className="product-card">
        <Image
          src={product.image}
          alt={product.name}
          width={300}
          height={200}
          priority={product.featured}
          placeholder="blur"
          blurDataURL="data:image/jpeg;base64,..."
        />
        <h3>{product.name}</h3>
      </div>
    </Link>
  )
}
```

## TypeScript Implementation

### Strict Configuration
```typescript
// tsconfig.json
{
  "compilerOptions": {
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "exactOptionalPropertyTypes": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true
  }
}
```

### Type Definitions
- Define clear interfaces for all data structures
- Use generic types for reusable components and utilities
- Implement proper API response typing
- Use branded types for domain-specific values

```typescript
// types/user.ts
export interface User {
  id: string
  name: string
  email: string
  role: UserRole
  createdAt: Date
  profile?: UserProfile
}

export interface UserProfile {
  avatar?: string
  bio?: string
  socialLinks: SocialLink[]
}

export type UserRole = 'admin' | 'user' | 'moderator'

// API Response types
export interface ApiResponse<T> {
  data: T
  message: string
  success: boolean
}

export interface PaginatedResponse<T> extends ApiResponse<T[]> {
  pagination: {
    page: number
    limit: number
    total: number
    totalPages: number
  }
}

// Utility types
export type CreateUserInput = Omit<User, 'id' | 'createdAt'>
export type UpdateUserInput = Partial<Pick<User, 'name' | 'email'>>
```

### Advanced TypeScript Patterns
```typescript
// Type guards
function isUser(obj: unknown): obj is User {
  return (
    typeof obj === 'object' &&
    obj !== null &&
    'id' in obj &&
    'name' in obj &&
    'email' in obj
  )
}

// Branded types
type UserId = string & { readonly brand: unique symbol }
type Email = string & { readonly brand: unique symbol }

// Generic API hook
function useApiQuery<T>(
  endpoint: string,
  options?: RequestInit
): {
  data: T | null
  loading: boolean
  error: Error | null
} {
  // Implementation
}
```

## Component Architecture

### Functional Components with TypeScript
```typescript
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'danger'
  size?: 'sm' | 'md' | 'lg'
  isLoading?: boolean
  leftIcon?: React.ReactNode
}

export function Button({
  variant = 'primary',
  size = 'md',
  isLoading = false,
  leftIcon,
  children,
  className,
  disabled,
  ...props
}: ButtonProps) {
  return (
    <button
      className={cn(getButtonStyles({ variant, size }), className)}
      disabled={isLoading || disabled}
      {...props}
    >
      {isLoading && <Spinner size="sm" />}
      {leftIcon && <span className="mr-2">{leftIcon}</span>}
      {children}
    </button>
  )
}
```

### Custom Hooks Pattern
```typescript
interface UseToggleReturn {
  isOpen: boolean
  open: () => void
  close: () => void
  toggle: () => void
}

export function useToggle(initialState = false): UseToggleReturn {
  const [isOpen, setIsOpen] = useState(initialState)
  
  const open = useCallback(() => setIsOpen(true), [])
  const close = useCallback(() => setIsOpen(false), [])
  const toggle = useCallback(() => setIsOpen(prev => !prev), [])
  
  return useMemo(
    () => ({ isOpen, open, close, toggle }),
    [isOpen, open, close, toggle]
  )
}

// API hook example
export function useUser(userId: string) {
  return useQuery({
    queryKey: ['user', userId],
    queryFn: () => fetchUser(userId),
    enabled: !!userId,
    staleTime: 5 * 60 * 1000, // 5 minutes
  })
}
```

## API Routes & Server Actions

### API Routes (App Router)
```typescript
// app/api/users/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'

const CreateUserSchema = z.object({
  name: z.string().min(1),
  email: z.string().email(),
})

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const validatedData = CreateUserSchema.parse(body)
    
    const user = await createUser(validatedData)
    
    return NextResponse.json({ 
      success: true, 
      data: user 
    }, { status: 201 })
    
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json({
        success: false,
        message: 'Validation error',
        errors: error.errors
      }, { status: 400 })
    }
    
    return NextResponse.json({
      success: false,
      message: 'Internal server error'
    }, { status: 500 })
  }
}
```

### Server Actions
```typescript
// lib/actions/user-actions.ts
'use server'

import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'

export async function createUser(formData: FormData) {
  const validatedFields = CreateUserSchema.safeParse({
    name: formData.get('name'),
    email: formData.get('email'),
  })

  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  try {
    await insertUser(validatedFields.data)
  } catch (error) {
    return {
      message: 'Database Error: Failed to create user.',
    }
  }

  revalidatePath('/users')
  redirect('/users')
}
```

## State Management

### Local State with TypeScript
```typescript
// Complex state with useReducer
interface FormState {
  values: Record<string, string>
  errors: Record<string, string[]>
  isSubmitting: boolean
}

type FormAction =
  | { type: 'SET_FIELD'; field: string; value: string }
  | { type: 'SET_ERRORS'; errors: Record<string, string[]> }
  | { type: 'SET_SUBMITTING'; isSubmitting: boolean }
  | { type: 'RESET' }

function formReducer(state: FormState, action: FormAction): FormState {
  switch (action.type) {
    case 'SET_FIELD':
      return {
        ...state,
        values: { ...state.values, [action.field]: action.value },
        errors: { ...state.errors, [action.field]: [] }
      }
    case 'SET_ERRORS':
      return { ...state, errors: action.errors, isSubmitting: false }
    case 'SET_SUBMITTING':
      return { ...state, isSubmitting: action.isSubmitting }
    case 'RESET':
      return { values: {}, errors: {}, isSubmitting: false }
    default:
      return state
  }
}
```

### Global State with Context
```typescript
interface AuthContextType {
  user: User | null
  login: (email: string, password: string) => Promise<void>
  logout: () => void
  isLoading: boolean
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [isLoading, setIsLoading] = useState(true)

  const login = useCallback(async (email: string, password: string) => {
    setIsLoading(true)
    try {
      const user = await authenticateUser(email, password)
      setUser(user)
    } finally {
      setIsLoading(false)
    }
  }, [])

  const logout = useCallback(() => {
    setUser(null)
    // Clear cookies, redirect, etc.
  }, [])

  const value = useMemo(
    () => ({ user, login, logout, isLoading }),
    [user, login, logout, isLoading]
  )

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}
```

## UI and Styling

### Tailwind CSS with TypeScript
```typescript
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/lib/utils'

const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline: 'border border-input hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'underline-offset-4 hover:underline text-primary',
      },
      size: {
        default: 'h-10 py-2 px-4',
        sm: 'h-9 px-3 rounded-md',
        lg: 'h-11 px-8 rounded-md',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

export function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: ButtonProps) {
  const Comp = asChild ? Slot : 'button'
  return (
    <Comp
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}
```

### Responsive Design Patterns
```typescript
// Mobile-first responsive utilities
const breakpoints = {
  sm: '640px',
  md: '768px',
  lg: '1024px',
  xl: '1280px',
  '2xl': '1536px',
} as const

// Component with responsive props
interface ContainerProps {
  children: React.ReactNode
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full'
  className?: string
}

export function Container({ 
  children, 
  size = 'lg', 
  className 
}: ContainerProps) {
  const sizeClasses = {
    sm: 'max-w-sm',
    md: 'max-w-md',
    lg: 'max-w-4xl',
    xl: 'max-w-6xl',
    full: 'max-w-full',
  }

  return (
    <div className={cn(
      'mx-auto px-4 sm:px-6 lg:px-8',
      sizeClasses[size],
      className
    )}>
      {children}
    </div>
  )
}
```

## Error Handling and Validation

### Form Validation with Zod
```typescript
import { z } from 'zod'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'

const UserFormSchema = z.object({
  name: z.string().min(1, 'Name is required').max(50),
  email: z.string().email('Invalid email address'),
  age: z.number().min(0).max(120).optional(),
  role: z.enum(['admin', 'user', 'moderator']),
})

type UserFormData = z.infer<typeof UserFormSchema>

export function UserForm() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset,
  } = useForm<UserFormData>({
    resolver: zodResolver(UserFormSchema),
  })

  const onSubmit = async (data: UserFormData) => {
    try {
      await createUser(data)
      reset()
    } catch (error) {
      // Handle error
    }
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div>
        <label htmlFor="name">Name</label>
        <input
          {...register('name')}
          type="text"
          id="name"
          className={cn(
            'input',
            errors.name && 'border-red-500'
          )}
        />
        {errors.name && (
          <p className="text-red-500 text-sm mt-1">
            {errors.name.message}
          </p>
        )}
      </div>
      
      <button 
        type="submit" 
        disabled={isSubmitting}
        className="btn-primary"
      >
        {isSubmitting ? 'Creating...' : 'Create User'}
      </button>
    </form>
  )
}
```

### Error Boundaries
```typescript
'use client' // Error boundaries must be Client Components

import { ErrorBoundary } from 'react-error-boundary'

function ErrorFallback({ 
  error, 
  resetErrorBoundary 
}: {
  error: Error
  resetErrorBoundary: () => void
}) {
  return (
    <div className="error-boundary">
      <h2>Something went wrong:</h2>
      <pre>{error.message}</pre>
      <button onClick={resetErrorBoundary}>Try again</button>
    </div>
  )
}

export function AppErrorBoundary({ children }: { children: React.ReactNode }) {
  return (
    <ErrorBoundary
      FallbackComponent={ErrorFallback}
      onError={(error, errorInfo) => {
        console.error('Error caught by boundary:', error, errorInfo)
        // Log to external service
      }}
    >
      {children}
    </ErrorBoundary>
  )
}
```

## Testing

### Component Testing
```typescript
import { render, screen, waitFor } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { UserForm } from './UserForm'

// Mock API calls
jest.mock('@/lib/api', () => ({
  createUser: jest.fn(),
}))

describe('UserForm', () => {
  const user = userEvent.setup()

  beforeEach(() => {
    jest.clearAllMocks()
  })

  it('should validate required fields', async () => {
    render(<UserForm />)
    
    const submitButton = screen.getByRole('button', { name: /create user/i })
    await user.click(submitButton)
    
    expect(screen.getByText('Name is required')).toBeInTheDocument()
  })

  it('should submit form with valid data', async () => {
    const { createUser } = await import('@/lib/api')
    ;(createUser as jest.Mock).mockResolvedValueOnce({ id: '1' })

    render(<UserForm />)
    
    await user.type(screen.getByLabelText(/name/i), 'John Doe')
    await user.type(screen.getByLabelText(/email/i), 'john@example.com')
    await user.click(screen.getByRole('button', { name: /create user/i }))
    
    await waitFor(() => {
      expect(createUser).toHaveBeenCalledWith({
        name: 'John Doe',
        email: 'john@example.com',
        role: 'user',
      })
    })
  })
})
```

### API Route Testing
```typescript
import { createMocks } from 'node-mocks-http'
import { POST } from '@/app/api/users/route'

describe('/api/users', () => {
  it('should create a user with valid data', async () => {
    const { req } = createMocks({
      method: 'POST',
      body: {
        name: 'John Doe',
        email: 'john@example.com',
      },
    })

    const response = await POST(req as any)
    const data = await response.json()

    expect(response.status).toBe(201)
    expect(data.success).toBe(true)
    expect(data.data).toHaveProperty('id')
  })

  it('should return validation error for invalid data', async () => {
    const { req } = createMocks({
      method: 'POST',
      body: {
        name: '',
        email: 'invalid-email',
      },
    })

    const response = await POST(req as any)
    const data = await response.json()

    expect(response.status).toBe(400)
    expect(data.success).toBe(false)
    expect(data.errors).toBeDefined()
  })
})
```

## Performance Optimization

### Image Optimization
```typescript
import Image from 'next/image'

// Responsive images with proper optimization
function ResponsiveImage({ 
  src, 
  alt, 
  priority = false 
}: {
  src: string
  alt: string
  priority?: boolean
}) {
  return (
    <Image
      src={src}
      alt={alt}
      fill
      priority={priority}
      sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
      className="object-cover"
    />
  )
}
```

### Code Splitting and Lazy Loading
```typescript
import dynamic from 'next/dynamic'
import { Suspense } from 'react'

// Dynamic imports for code splitting
const HeavyComponent = dynamic(() => import('@/components/HeavyComponent'), {
  loading: () => <div>Loading...</div>,
  ssr: false, // Only render on client if needed
})

// Lazy loading with Suspense
function Dashboard() {
  return (
    <div>
      <h1>Dashboard</h1>
      <Suspense fallback={<div>Loading charts...</div>}>
        <HeavyComponent />
      </Suspense>
    </div>
  )
}
```

## Security Best Practices

### Input Sanitization
```typescript
import DOMPurify from 'isomorphic-dompurify'

// Sanitize HTML content
function sanitizeHtml(html: string): string {
  return DOMPurify.sanitize(html, {
    ALLOWED_TAGS: ['p', 'br', 'strong', 'em'],
    ALLOWED_ATTR: [],
  })
}

// Safe HTML rendering component
interface SafeHtmlProps {
  content: string
  className?: string
}

function SafeHtml({ content, className }: SafeHtmlProps) {
  const sanitizedContent = sanitizeHtml(content)
  
  return (
    <div
      className={className}
      dangerouslySetInnerHTML={{ __html: sanitizedContent }}
    />
  )
}
```

### Environment Variables
```typescript
// lib/env.ts
import { z } from 'zod'

const envSchema = z.object({
  DATABASE_URL: z.string().url(),
  NEXT_PUBLIC_API_URL: z.string().url(),
  JWT_SECRET: z.string().min(32),
  NODE_ENV: z.enum(['development', 'production', 'test']),
})

export const env = envSchema.parse(process.env)
```

## Accessibility (a11y)

```typescript
// Accessible form component
interface AccessibleFormProps {
  children: React.ReactNode
  onSubmit: (data: FormData) => void
  'aria-label': string
}

function AccessibleForm({ 
  children, 
  onSubmit, 
  'aria-label': ariaLabel 
}: AccessibleFormProps) {
  return (
    <form
      onSubmit={(e) => {
        e.preventDefault()
        onSubmit(new FormData(e.currentTarget))
      }}
      aria-label={ariaLabel}
      noValidate
    >
      {children}
    </form>
  )
}

// Focus management hook
function useFocusManagement() {
  const focusRefs = useRef<(HTMLElement | null)[]>([])

  const setFocusRef = useCallback((index: number) => (el: HTMLElement | null) => {
    focusRefs.current[index] = el
  }, [])

  const focusElement = useCallback((index: number) => {
    focusRefs.current[index]?.focus()
  }, [])

  return { setFocusRef, focusElement }
}
```

## Project Structure

```
project-root/
├── app/                          # App Router directory
│   ├── (auth)/                   # Route groups
│   │   ├── login/
│   │   └── register/
│   ├── api/                      # API routes
│   │   ├── users/
│   │   └── auth/
│   ├── globals.css
│   ├── layout.tsx
│   ├── loading.tsx
│   ├── error.tsx
│   ├── not-found.tsx
│   └── page.tsx
├── components/                   # Reusable components
│   ├── ui/                      # Basic UI components
│   ├── forms/                   # Form components
│   └── layouts/                 # Layout components
├── lib/                         # Utility functions
│   ├── utils.ts
│   ├── validations.ts
│   ├── api.ts
│   └── auth.ts
├── hooks/                       # Custom React hooks
├── types/                       # TypeScript type definitions
├── styles/                      # Additional styles
├── public/                      # Static assets
└── __tests__/                   # Test files
```

## Key Conventions

1. **Type Safety First**: Use TypeScript strict mode and comprehensive typing
2. **Performance Oriented**: Leverage Next.js optimizations and React best practices
3. **SEO Optimized**: Use Next.js metadata API and server components
4. **Accessibility Compliant**: Implement proper ARIA labels and semantic HTML
5. **Error Resilient**: Comprehensive error handling and validation
6. **Developer Experience**: Consistent code style and clear documentation
7. **Testing Strategy**: Unit and integration tests for critical functionality
8. **Security Focused**: Input sanitization and secure authentication
9. **Scalable Architecture**: Modular components and clear separation of concerns
10. **Modern Standards**: Latest Next.js features and React patterns

This comprehensive guide ensures robust, maintainable, and performant Next.js applications with TypeScript.