// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db { 
  provider = "postgresql"
  url      = env("DATABASE_URL_NEON")
}



model User {
  id             String       @id @default(uuid())
  name           String
  email          String       @unique
  password       String
  phone          String?
  location       String?
  profilePicture String?
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
  stripeCustomerId String?    @unique
  
  workExperience WorkExperience[]
  skills         Skill[]
  education      Education[]
  socialLinks    SocialLink[]
  cvPreferences  CvPreferences?
  subscription   Subscription?
  paymentMethods PaymentMethod[]
}

model WorkExperience {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  company     String
  jobTitle    String
  startDate   DateTime
  endDate     DateTime?
  description String?
  updatedAt   DateTime?     @updatedAt
  createdAt   DateTime? @default(now())
}

model Skill {
  id       String  @id @default(uuid())
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name     String
  level    Int     @default(1) // Nivel de habilidad, por ejemplo, de 1 a 5
  createdAt DateTime? @default(now())
}

model Education {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  institution String
  degree      String
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime? @default(now())
}

model SocialLink {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform  String   // LinkedIn, GitHub, Portfolio, etc.
  url       String
  createdAt DateTime? @default(now())
}

model CvPreferences {
  id             String  @id @default(uuid())
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  template       String  @default("modern")
  primaryColor   String  @default("#2563eb")
  secondaryColor String  @default("#3b82f6")
  fontFamily     String  @default("Inter")
  fontSize       String  @default("medium")
  spacing        Float   @default(1)
  showPhoto      Boolean @default(true)
  showContact    Boolean @default(true)
  showSocial     Boolean @default(true)
  pageSize       String  @default("a4")
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt
}

model Subscription {
  id                 String   @id @default(uuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeSubscriptionId String  @unique
  status             String   // 'active', 'canceled', 'past_due', etc.
  planId             String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model PaymentMethod {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripePaymentMethodId String
  type              String   // 'card', etc.
  last4             String?  // últimos 4 dígitos de la tarjeta
  expMonth          Int?     // mes de expiración
  expYear           Int?     // año de expiración
  brand             String?  // visa, mastercard, etc.
  isDefault         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, stripePaymentMethodId])
}

model SubscriptionPlan {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  currency    String   @default("USD")
  interval    String   // 'month', 'year'
  stripePriceId String  @unique
  features    String[]
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}